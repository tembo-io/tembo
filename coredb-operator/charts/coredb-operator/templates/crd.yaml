apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: coredbs.coredb.io
spec:
  group: coredb.io
  names:
    categories: []
    kind: CoreDB
    plural: coredbs
    shortNames:
    - cdb
    singular: coredb
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Auto-generated derived type for CoreDBSpec via `CustomResource`
        properties:
          spec:
            description: |-
              Generate the Kubernetes wrapper struct `CoreDB` from our Spec and Status struct

              This provides a hook for generating the CRD yaml (in crdgen.rs)
            properties:
              extensions:
                default: []
                items:
                  properties:
                    description:
                      default: No description provided
                      type: string
                    locations:
                      items:
                        properties:
                          database:
                            default: postrgres
                            type: string
                          enabled:
                            type: boolean
                          schema:
                            default: public
                            type: string
                          version:
                            nullable: true
                            type: string
                        required:
                        - enabled
                        type: object
                      type: array
                    name:
                      type: string
                  required:
                  - locations
                  - name
                  type: object
                type: array
              image:
                default: quay.io/coredb/coredb-pg-slim:a1a66f9
                type: string
              pkglibdirStorage:
                default: 1Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
              port:
                default: 5432
                format: int32
                type: integer
              postgresExporterEnabled:
                default: true
                type: boolean
              postgresExporterImage:
                default: quay.io/prometheuscommunity/postgres-exporter:v0.11.1
                type: string
              replicas:
                default: 1
                format: int32
                type: integer
              resources:
                default:
                  limits:
                    cpu: '2'
                    memory: 2Gi
                  requests:
                    cpu: 500m
                    memory: 512Mi
                description: ResourceRequirements describes the compute resource requirements.
                properties:
                  limits:
                    additionalProperties:
                      description: |-
                        Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                        The serialization format is:

                        <quantity>        ::= <signedNumber><suffix>
                          (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                        <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                          (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                        <decimalSI>       ::= m | "" | k | M | G | T | P | E
                          (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                        <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                        No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                        When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                        Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                          a. No precision is lost
                          b. No fractional digits will be emitted
                          c. The exponent (or suffix) is as large as possible.
                        The sign will be omitted unless the number is negative.

                        Examples:
                          1.5 will be serialized as "1500m"
                          1.5Gi will be serialized as "1536Mi"

                        Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                        Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                        This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                      type: string
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      description: |-
                        Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                        The serialization format is:

                        <quantity>        ::= <signedNumber><suffix>
                          (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                        <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                          (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                        <decimalSI>       ::= m | "" | k | M | G | T | P | E
                          (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                        <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                        No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                        When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                        Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                          a. No precision is lost
                          b. No fractional digits will be emitted
                          c. The exponent (or suffix) is as large as possible.
                        The sign will be omitted unless the number is negative.

                        Examples:
                          1.5 will be serialized as "1500m"
                          1.5Gi will be serialized as "1536Mi"

                        Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                        Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                        This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                      type: string
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              sharedirStorage:
                default: 1Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
              stop:
                default: false
                type: boolean
              storage:
                default: 8Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
              uid:
                default: 999
                format: int32
                type: integer
            type: object
          status:
            description: The status object of `CoreDB`
            nullable: true
            properties:
              extensions:
                items:
                  properties:
                    description:
                      default: No description provided
                      type: string
                    locations:
                      items:
                        properties:
                          database:
                            default: postrgres
                            type: string
                          enabled:
                            type: boolean
                          schema:
                            default: public
                            type: string
                          version:
                            nullable: true
                            type: string
                        required:
                        - enabled
                        type: object
                      type: array
                    name:
                      type: string
                  required:
                  - locations
                  - name
                  type: object
                nullable: true
                type: array
              pkglibdirStorage:
                default: 1Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
              running:
                type: boolean
              sharedirStorage:
                default: 1Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
              storage:
                default: 8Gi
                description: |-
                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                  The serialization format is:

                  <quantity>        ::= <signedNumber><suffix>
                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                    a. No precision is lost
                    b. No fractional digits will be emitted
                    c. The exponent (or suffix) is as large as possible.
                  The sign will be omitted unless the number is negative.

                  Examples:
                    1.5 will be serialized as "1500m"
                    1.5Gi will be serialized as "1536Mi"

                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                type: string
            required:
            - running
            type: object
        required:
        - spec
        title: CoreDB
        type: object
    served: true
    storage: true
    subresources:
      status: {}

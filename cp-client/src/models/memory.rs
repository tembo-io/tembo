/*
 * Tembo Cloud
 *
 * Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Memory {
    #[serde(rename = "512Mi")]
    Variant512Mi,
    #[serde(rename = "1Gi")]
    Variant1Gi,
    #[serde(rename = "2Gi")]
    Variant2Gi,
    #[serde(rename = "4Gi")]
    Variant4Gi,
    #[serde(rename = "8Gi")]
    Variant8Gi,
    #[serde(rename = "12Gi")]
    Variant12Gi,
    #[serde(rename = "16Gi")]
    Variant16Gi,
    #[serde(rename = "24Gi")]
    Variant24Gi,
    #[serde(rename = "32Gi")]
    Variant32Gi,
    #[serde(rename = "64Gi")]
    Variant64Gi,
}

impl std::fmt::Display for Memory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Variant512Mi => write!(f, "512Mi"),
            Self::Variant1Gi => write!(f, "1Gi"),
            Self::Variant2Gi => write!(f, "2Gi"),
            Self::Variant4Gi => write!(f, "4Gi"),
            Self::Variant8Gi => write!(f, "8Gi"),
            Self::Variant12Gi => write!(f, "12Gi"),
            Self::Variant16Gi => write!(f, "16Gi"),
            Self::Variant24Gi => write!(f, "24Gi"),
            Self::Variant32Gi => write!(f, "32Gi"),
            Self::Variant64Gi => write!(f, "64Gi"),
        }
    }
}

impl Default for Memory {
    fn default() -> Memory {
        Self::Variant512Mi
    }
}

impl std::str::FromStr for Memory {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "512Mi" => Ok(Self::Variant512Mi),
            "1Gi" => Ok(Self::Variant1Gi),
            "2Gi" => Ok(Self::Variant2Gi),
            "4Gi" => Ok(Self::Variant4Gi),
            "8Gi" => Ok(Self::Variant8Gi),
            "12Gi" => Ok(Self::Variant12Gi),
            "16Gi" => Ok(Self::Variant16Gi),
            "24Gi" => Ok(Self::Variant24Gi),
            "32Gi" => Ok(Self::Variant32Gi),
            "64Gi" => Ok(Self::Variant64Gi),
            _ => Err(format!("Invalid memory value: {}", s)),
        }
    }
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -D Default backups.postgresql.cnpg.io
// kopium version: 0.15.0

use kube::CustomResource;
use serde::{Deserialize, Serialize};

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default)]
#[kube(
    group = "postgresql.cnpg.io",
    version = "v1",
    kind = "Backup",
    plural = "backups"
)]
#[kube(namespaced)]
#[kube(status = "BackupStatus")]
#[kube(schema = "disabled")]
pub struct BackupSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<BackupCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<BackupTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupCluster {
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum BackupTarget {
    #[serde(rename = "primary")]
    Primary,
    #[serde(rename = "prefer-standby")]
    PreferStandby,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "azureCredentials"
    )]
    pub azure_credentials: Option<BackupStatusAzureCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupId")]
    pub backup_id: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupName"
    )]
    pub backup_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beginLSN")]
    pub begin_lsn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beginWal")]
    pub begin_wal: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commandError"
    )]
    pub command_error: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commandOutput"
    )]
    pub command_output: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationPath"
    )]
    pub destination_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endLSN")]
    pub end_lsn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endWal")]
    pub end_wal: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointCA"
    )]
    pub endpoint_ca: Option<BackupStatusEndpointCa>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointURL"
    )]
    pub endpoint_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "googleCredentials"
    )]
    pub google_credentials: Option<BackupStatusGoogleCredentials>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceID"
    )]
    pub instance_id: Option<BackupStatusInstanceId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Credentials"
    )]
    pub s3_credentials: Option<BackupStatusS3Credentials>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverName"
    )]
    pub server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startedAt")]
    pub started_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stoppedAt")]
    pub stopped_at: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusAzureCredentials {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionString"
    )]
    pub connection_string: Option<BackupStatusAzureCredentialsConnectionString>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inheritFromAzureAD"
    )]
    pub inherit_from_azure_ad: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageAccount"
    )]
    pub storage_account: Option<BackupStatusAzureCredentialsStorageAccount>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageKey"
    )]
    pub storage_key: Option<BackupStatusAzureCredentialsStorageKey>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageSasToken"
    )]
    pub storage_sas_token: Option<BackupStatusAzureCredentialsStorageSasToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusAzureCredentialsConnectionString {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusAzureCredentialsStorageAccount {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusAzureCredentialsStorageKey {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusAzureCredentialsStorageSasToken {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusEndpointCa {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusGoogleCredentials {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationCredentials"
    )]
    pub application_credentials: Option<BackupStatusGoogleCredentialsApplicationCredentials>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gkeEnvironment"
    )]
    pub gke_environment: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusGoogleCredentialsApplicationCredentials {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusInstanceId {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ContainerID"
    )]
    pub container_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podName")]
    pub pod_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusS3Credentials {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessKeyId"
    )]
    pub access_key_id: Option<BackupStatusS3CredentialsAccessKeyId>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inheritFromIAMRole"
    )]
    pub inherit_from_iam_role: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<BackupStatusS3CredentialsRegion>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretAccessKey"
    )]
    pub secret_access_key: Option<BackupStatusS3CredentialsSecretAccessKey>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionToken"
    )]
    pub session_token: Option<BackupStatusS3CredentialsSessionToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusS3CredentialsAccessKeyId {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusS3CredentialsRegion {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusS3CredentialsSecretAccessKey {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default)]
pub struct BackupStatusS3CredentialsSessionToken {
    pub key: String,
    pub name: String,
}

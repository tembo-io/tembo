// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -D Default volumesnapshotcontents.snapshot.storage.k8s.io -A
// kopium version: 0.16.5

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

/// spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, JsonSchema)]
#[kube(
    group = "snapshot.storage.k8s.io",
    version = "v1",
    kind = "VolumeSnapshotContent",
    plural = "volumesnapshotcontents"
)]
#[kube(status = "VolumeSnapshotContentStatus")]
pub struct VolumeSnapshotContentSpec {
    /// deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
    #[serde(rename = "deletionPolicy")]
    pub deletion_policy: VolumeSnapshotContentDeletionPolicy,
    /// driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
    pub driver: String,
    /// source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
    pub source: VolumeSnapshotContentSource,
    /// SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceVolumeMode"
    )]
    pub source_volume_mode: Option<String>,
    /// name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSnapshotClassName"
    )]
    pub volume_snapshot_class_name: Option<String>,
    /// volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
    #[serde(rename = "volumeSnapshotRef")]
    pub volume_snapshot_ref: VolumeSnapshotContentVolumeSnapshotRef,
}

/// spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
#[derive(Serialize, Deserialize, Clone, Default, Debug, JsonSchema)]
pub enum VolumeSnapshotContentDeletionPolicy {
    Delete,
    #[default]
    Retain,
}

/// source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
#[derive(Serialize, Deserialize, Clone, Debug, Default, JsonSchema)]
pub struct VolumeSnapshotContentSource {
    /// snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotHandle"
    )]
    pub snapshot_handle: Option<String>,
    /// volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeHandle"
    )]
    pub volume_handle: Option<String>,
}

/// volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
#[derive(Serialize, Deserialize, Clone, Debug, Default, JsonSchema)]
pub struct VolumeSnapshotContentVolumeSnapshotRef {
    /// API version of the referent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiVersion"
    )]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceVersion"
    )]
    pub resource_version: Option<String>,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// status represents the current information of a snapshot.
#[derive(Serialize, Deserialize, Clone, Debug, Default, JsonSchema)]
pub struct VolumeSnapshotContentStatus {
    /// creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creationTime"
    )]
    pub creation_time: Option<i64>,
    /// error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<VolumeSnapshotContentStatusError>,
    /// readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readyToUse"
    )]
    pub ready_to_use: Option<bool>,
    /// restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreSize"
    )]
    pub restore_size: Option<i64>,
    /// snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotHandle"
    )]
    pub snapshot_handle: Option<String>,
    /// VolumeGroupSnapshotContentName is the name of the VolumeGroupSnapshotContent of which this VolumeSnapshotContent is a part of.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeGroupSnapshotContentName"
    )]
    pub volume_group_snapshot_content_name: Option<String>,
}

/// error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
#[derive(Serialize, Deserialize, Clone, Debug, Default, JsonSchema)]
pub struct VolumeSnapshotContentStatusError {
    /// message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// time is the timestamp when the error was encountered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

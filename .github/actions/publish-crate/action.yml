name: 'Publish to crates.io'
description: 'Publish cratest to crates.io and some other crates.io-related actions, like checking if a version is already published.'
inputs:
  working-directory:
    required: false
    description: "In which directory should we run 'cargo publish'?"
    default: "."
  cargo-registry-token:
    required: true
    description: "The CARGO_REGISTRY_TOKEN to use"
  fail-if-version-published:
    description: "If the version is already published, should we fail, or ignore? By default, ignore."
    required: false
    default: false
  dry-run:
    description: "Use --dry-run flag on cargo publish?"
    required: false
    default: false
  toolchain:
    description: "Which Rust toolchain to use?"
    default: "stable"
    required: false
outputs: {}
runs:
  using: "composite"
  steps:
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.toolchain }}
    - name: Install TOML parser
      shell: bash
      run: |
       set -xe
       wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
       mv stoml_linux_amd64 stoml
       chmod +x stoml
       sudo mv stoml /usr/local/bin/
    - name: Publish
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -xe

        # If package.publish is false, skip the rest
        SHOULD_PUBLISH=$(stoml Cargo.toml package.publish)
        if [[ "${SHOULD_PUBLISH}" == "false" ]]; then
            echo "Found package.publish is false. Skipping."
            exit 0
        fi

        # Get crate information
        NAME=$(stoml Cargo.toml package.name)
        VERSION=$(stoml Cargo.toml package.version)
        VERSIONS_INFO=$(curl https://crates.io/api/v1/crates/${NAME} 2> /dev/null)
        # "|| true" handles the case where this crate hasn't yet been published
        PUBLISHED_VERSIONS=$(echo ${VERSIONS_INFO} | jq -r '.versions[] | .num' || true)
        echo ${VERSIONS_INFO}

        # If this version is already published...
        if echo ${VERSIONS_INFO} | jq -r ".versions[] | .num | . == \"${VERSION}\"" | grep true; then
          echo "The version '${VERSION}' of '${NAME}' is already published."
          if [ "${{ inputs.fail-if-version-published }}" == "true" ]; then
            exit 1
          else
            echo "Skipping the rest of the action because inputs.fail-if-version-published is false."
            exit 0
          fi
        fi
        echo "Did not detect the version ${VERSION} to be already published."
        echo "The list of known versions:"
        echo $PUBLISHED_VERSIONS

        # Set --dry-run flag, if configured
        DRY_RUN=""
        if [ "${{ inputs.dry-run }}" == "true" ]; then
          DRY_RUN="--dry-run"
        fi

        cargo publish ${DRY_RUN} --token ${{ inputs.cargo-registry-token }}

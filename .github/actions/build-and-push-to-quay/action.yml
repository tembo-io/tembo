name: 'Build and push to Quay'
description: 'Builds a container image and pushes it to our Quay organization'
inputs:
  image_name:
    decription: 'The name of the image, not including the registry or the tag, for example "postgres"'
    required: true
  registry:
    decription: 'The name of the image, not including the registry or the tag, for example "postgres"'
    required: false
    default: "quay.io/coredb"
  docker_directory:
    description: 'The relative path to a directory in which there is a Dockerfile'
    required: false
    default: '.'
  quay_user:
    required: true
    description: "Quay 'robot user' user name"
  quay_password:
    required: true
    description: "Quay 'robot user' access token"
  publish_calver:
    description: 'Should we tag with calender versioning?'
    required: false
    default: false
  publish_latest:
    description: "Should we tag with 'latest'?"
    required: false
    default: false
  tags:
    description: "Whitespace-separated tags, not including the registry, for example 'v1' or 'v1 release-1.0'. There are also some default tags provided, please see the other options of this action."
    required: false
    default: false
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Create whitespace-separated tags list
      shell: bash
      id: tags
      run: |
        set -xe

        # input tags
        TAGS='${{ inputs.tags }}'

        # Calendar version
        if [ "${{ inputs.publish_calver }}" == "true" ]; then
          CAL_VER=$(date '+%Y.%m.%d')
          TAGS="$TAGS ${CAL_VER}"
        fi

        # latest
        if [ "${{ inputs.publish_latest }}" == "true" ]; then
          TAGS="$TAGS latest"
        fi

        # Short Git hash
        SHORT_SHA=$(git rev-parse --short HEAD)
        TAGS="$TAGS ${SHORT_SHA}"

        echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
    - name: Build image and tag
      shell: bash
      run: |
        set -xe
        # Build the image
        docker build -t ${{ inputs.image_name }} ./{{ inputs.docker_directory }}
        # Tag with each tag in the comma-separate list
        IFS=' ' read -ra TAG_ARRAY <<< "${{ steps.tags.outputs.TAGS }}"
        for tag in "${TAG_ARRAY[@]}"; do
          docker tag ${{ inputs.image_name }} ${{ inputs.image_name }}:$tag
        done
    - name: Push To quay.io
      uses: redhat-actions/push-to-registry@v2
      with:
        registry: ${{ inputs.registry }}
        image: ${{ inputs.image_name }}
        tags: ${{ steps.tags.outputs.TAGS}}
        username: ${{ inputs.quay_user }}
        password: ${{ inputs.quay_password }}

name: 'Generate and Deploy Documentation'
description: 'Generate and deploy documentation files.'
inputs:
  tembo_repository:
    description: 'GitHub repository to work with for documentation generation.'
    required: true
  website_repository:
    description: 'Website repository to update with documentation.'
    required: true
  ssh_key:
    description: 'SSH key for repository access.'
    required: true
  tembo_branch:
    description: 'Branch to checkout for documentation generation.'
    required: true
  website_branch:
    description: 'Branch to update with generated documentation.'
    required: true

on:
  push:
    paths:
      - 'tembo-cli/**'
    branches:
      - main
  pull_request:
    paths:
      - 'tembo-cli/**'
    branches:
      - main
      - develop
      - feature/*

runs:
  using: "composite"
  steps:
    - name: Check out the tembo repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.tembo_repository }}
        ssh-key: ${{ inputs.ssh_key }}
        ref: ${{ inputs.tembo_branch }}
        path: 'tembo-repo'

    - name: Generate Documentation
      run: |
        cd tembo-repo/tembo-cli
        cargo run -- --markdown-help > ../command-reference.md
      shell: bash

    - name: Check out the website repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.website_repository }}
        ssh-key: ${{ inputs.ssh_key }}
        ref: main
        path: 'website-repo'

    - name: Copy documentation to website repository
      run: |
        mkdir -p website-repo/src/content/docs/development/cli/
        ls -lah
        cp tembo-repo/command-reference.md website-repo/src/content/docs/development/cli/
      shell: bash

    - name: Commit and push documentation to website repository
      run: |
        cd website-repo
        git config user.name "coredb-service-user"
        git config user.email "admin@github.com"
        
        # Fetch the latest changes from the remote branch
        git fetch origin cli-updates
        
        # Reset local copy to match the remote, discarding local changes
        git reset --hard origin/cli-updates
        
        # Setup a custom merge strategy to always choose local changes for specific files
        git config merge.ours.driver true
        
        # Attempt to merge remote changes, favoring our local changes during a conflict
        git merge -X ours origin/cli-updates
        
        # Add changes to command-reference.md
        git add src/content/docs/development/cli/command-reference.md
        
        # Commit the changes, handle the case where no changes exist
        git commit -m "Update command reference documentation" || echo "No changes to commit."
        
        # Force push to ensure local changes are applied on the remote branch
        git push --force origin cli-updates
      shell: bash




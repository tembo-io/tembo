name: Postgres Simple Message Queue (pg14)

defaults:
  run:
    shell: bash
    working-directory: ./extensions/pgmq/

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/pg_smq_ext.yml'
      - '.github/actions/pgx-init/**'
      - 'extensions/pgmq/**'
  # Always run tests on main or release branches
  push:
    branches:
      - main
      - 'release/[0-9]+.[0-9]+'

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-smq-extension-lint"
          workspaces: |
            extensions/pgmq
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: extensions/pgmq
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Clippy
        run: cargo clippy

  test:
    name: Run tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-smq-extension-test"
          workspaces: |
            extensions/pgmq
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: extensions/pgmq
      - name: test
        run: |
          git clone https://github.com/pgpartman/pg_partman.git && \
          cd pg_partman && \
          make install
          rm -rf ./target/pgx-test-data-* || true
          pg_version=$(stoml Cargo.toml features.default)
          cargo pgx test ${pg_version}

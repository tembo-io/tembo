name: Build and push images

on:
  pull_request: {}
  push:
    branches:
      - 'main'
      - 'release/**'

jobs:
  find_directories:
    name: Find directories with Dockerfiles
    runs-on: ubuntu-20.04
    outputs:
      include: ${{ steps.find_directories.outputs.include }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Find directories with Dockerfiles
        id: find_directories
        run: |
          set -xe
          git fetch origin ${{ github.base_ref }} || true
          # Get directories with a Dockerfile that have not changed
          # relative to the branch we are pulling into
          directories=$(
          find . -name Dockerfile -not -path "*/target/*" -exec dirname {} \; | while read dir; do
            # This will check if the directory has changed relative to the branch we are PRing
            # into, and if it's not a PR, in the case of main or release/**, then it will
            # build all docker directories
            if git diff --quiet HEAD origin/${{ github.base_ref || 'not-a-ref' }} -- "$dir"; then
              echo ""
            else
              echo "$dir"
            fi
          done)
          # Format into JSON for the next job
          matrix_include=$(echo "${directories}" | awk 'NF{print $NF};' | while read dir; do dir_without_dot=${dir#./}; echo "{\"path\": \"$dir\", \"name\": \"$dir_without_dot\"}"; done | jq -scM '{"include": .}')
          echo "${matrix_include}"
          echo "include=${matrix_include}" >> $GITHUB_OUTPUT
  build_and_push_images:
    name: Build and push images
    runs-on: ubuntu-20.04
    needs:
      - find_directories
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_directories.outputs.include) }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Determine which tags to publish
        id: tags
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "${BRANCH_NAME}" == "main" ]; then
            echo "tag_latest=true" >> $GITHUB_OUTPUT
            echo "tag_cargo=true" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == release/* ]]; then
            echo "tag_cargo=true" >> $GITHUB_OUTPUT
            echo "tag_latest=false" >> $GITHUB_OUTPUT
          else
            echo "tag_latest=false" >> $GITHUB_OUTPUT
            echo "tag_cargo=false" >> $GITHUB_OUTPUT
          fi
      - name: Build and upload image
        uses: ./.github/actions/build-and-push-to-quay
        with:
          image_name: ${{ matrix.name }}
          docker_directory: ${{ matrix.path }}
          # Tag with version in Cargo.toml
          # if that file is present
          # and if the branch is 'main' or starts with 'release/'
          tag_cargo_version_if_present: ${{ steps.tags.outputs.tag_cargo }}
          # Tag with 'latest'
          # if the branch is 'main'
          publish_latest: ${{ steps.tags.outputs.tag_latest }}
          quay_user: ${{ secrets.QUAY_USER }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

name: Build and push images

on:
  pull_request: {}
  push:
    branches:
      - 'main'
      - 'release/[0-9]+.[0-9]+'

jobs:
  find_directories:
    name: Find directories with Dockerfiles
    runs-on: ubuntu-20.04
    outputs:
      build_images: ${{ steps.find_directories.outputs.build_matrix }}
      short_sha: ${{ steps.versions.outputs.SHORT_SHA }}
      branch_name: ${{ steps.versions.outputs.BRANCH_NAME }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      - name: Find directories with Dockerfiles that changed
        id: find_directories
        uses: ./.github/actions/find-changed-directories
        with:
          contains_the_file: Dockerfile
          # If the branch does not exist, then it will not
          # filter any directories containing the file.
          # This allows for filtering out unchanged directories
          # in a pull request, and using all directories on the release
          # or main branches.
          changed_relative_to_branch: ${{ github.base_ref || 'not-a-branch' }}
          ignore_dirs: |-
            trunk/cli/src/commands/pgx_builder

  build_and_push_images:
    name: Build and push images
    runs-on:
      - self-hosted
      - dind
      - large-8x8
    needs:
      - find_directories
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_directories.outputs.build_images) }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Determine which tags to publish
        id: tags
        run: |
          BRANCH_NAME="${{ needs.find_directories.outputs.branch_name }}"
          if [ "${BRANCH_NAME}" == "main" ]; then
            echo "tag_latest=true" >> $GITHUB_OUTPUT
            echo "tag_cargo=true" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == release/* ]]; then
            echo "tag_cargo=true" >> $GITHUB_OUTPUT
            echo "tag_latest=false" >> $GITHUB_OUTPUT
          else
            echo "tag_latest=false" >> $GITHUB_OUTPUT
            echo "tag_cargo=false" >> $GITHUB_OUTPUT
          fi
      - name: Build and upload image
        uses: ./.github/actions/build-and-push-to-quay
        with:
          image_name: ${{ matrix.name }}
          docker_directory: ${{ matrix.path }}
          # Tag with version in Cargo.toml
          # if that file is present
          # and if the branch is 'main' or starts with 'release/'
          tag_cargo_version_if_present: ${{ steps.tags.outputs.tag_cargo }}
          # Tag with 'latest'
          # if the branch is 'main'
          publish_latest: ${{ steps.tags.outputs.tag_latest }}
          quay_user: ${{ secrets.QUAY_USER }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

  update_argocd_dev:
    name: Update ArgoCD in dev environment
    # if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-20.04
    needs:
      - find_directories
      - build_and_push_images
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          repository: coredb-io/app-deploy-dev
          ssh-key: ${{ secrets.SERVICE_USER_GITHUB_SSH_KEY }}
      - name: Update trunk registry
        uses: mikefarah/yq@v4.33.3
        with:
          cmd: yq -i '(.spec.source.helm.parameters.[] | select(.name == "image.tag")).value = "${{ needs.find_directories.outputs.short_sha }}"' dev/pgtrunkio-backend.yaml
      - name: Update coredb operator helm chart
        uses: mikefarah/yq@v4.33.3
        with:
          cmd: yq -i '.spec.source.targetRevision= "${{ needs.find_directories.outputs.short_sha }}"' dev/coredb-operator.yaml
      - name: Update coredb operator image
        uses: mikefarah/yq@v4.33.3
        with:
          cmd: yq -i '(.spec.source.helm.parameters.[] | select(.name == "image.tag")).value = "${{ needs.find_directories.outputs.short_sha }}"' dev/coredb-operator.yaml
      - name: Git commit and push to remote
        run: |
          set -xe
          git config --global user.name "coredb-service-user"
          git config --global user.email "admin+github@coredb.io"
          git add --all
          # debugging
          git diff HEAD
          git commit -m "Update from coredb-io/coredb: ${{ needs.push_to_registry.outputs.short_sha }}"
          git push origin main

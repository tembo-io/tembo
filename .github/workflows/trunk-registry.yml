name: Trunk registry workflow

defaults:
  run:
    shell: bash
    working-directory: ./trunk/registry/

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/trunk-registry.yml'
      - 'trunk/registry/**'

  # Always run on main or release branches
  push:
    branches:
      - main
      - release**

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-22.04
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - name: install sqlx-cli
        run: cargo install sqlx-cli
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "lint"
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Run migrations
        # ensure migration cache is up-to-date
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
        run: cargo sqlx migrate run
      - name: Migrations check
        # ensure migration cache is up-to-date
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
        run: cargo sqlx prepare --check
      - name: Clippy
        env:
          DATABASE_URL: "postgresql://postgres:postgres@0.0.0.0:5432/postgres"
        run: cargo clippy -- -Dwarnings


  build-push:
    name: Build and push image
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build image
        run: |
          set -xe
          docker build -t pgtrunkio-backend .
          docker tag pgtrunkio-backend pgtrunkio-backend:latest
          docker tag pgtrunkio-backend pgtrunkio-backend:${{ steps.versions.outputs.SHORT_SHA }}
      - name: Push To quay.io
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: quay.io/coredb
          image: pgtrunkio-backend
          tags: latest ${{ steps.versions.outputs.SHORT_SHA }}
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}
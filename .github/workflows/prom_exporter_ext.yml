name: Prometheus Exporter for Postgres (pg14)

defaults:
  run:
    shell: bash
    working-directory: ./extensions/prometheus_exporter/

on:
  pull_request:
    branches:
      - main
    paths:
    - '.github/workflows/prom_exporter_ext.yml'
    - 'extensions/prometheus_exporter/**'
  # Always run tests on main or release branches
  push:
    branches:
      - main
      - 'release/[0-9]+.[0-9]+'

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "prom-extension-lint"
          workspaces: |
            extensions/prometheus_exporter
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: extensions/prometheus_exporter
          pgx_version: "0.6.1"
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Clippy
        run: cargo clippy

  test:
    name: Run tests
    runs-on: ubuntu-20.04
    needs: lint
    strategy:
      # fail-fast means to cancel all jobs if one fails
      fail-fast: false
      matrix:
        pg_version:
          - 14
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "prom-extension-test-${{ matrix.pg_version }}"
          workspaces: |
            extensions/prometheus_exporter
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: extensions/prometheus_exporter
          pg_version: ${{ matrix.pg_version }}
          pgx_version: "0.6.1"
      - name: test
        run: |
          rm -rf ./target/pgx-test-data-${{ matrix.pg_version }} || true
          cargo pgx test pg${{ matrix.pg_version }}
